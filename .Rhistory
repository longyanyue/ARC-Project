#    trendline.pH <- runquantile(data_pause, 241, probs=c(0.5, 0.75))
#  }
POINTS <- FALSE
DIRECTION <- NULL
## FOR ABOVE
# data_set_2 <- data_set_2 + seasonalAdjust
if (data_set_2$pH[current_pos] >= trendline.pH[, 1][current_pos]) {
countAB.pH1 <<- countAB.pH1 + 1
countBW.pH1 <<- 0
### if smaller sample mean is greater then previous 2 hours and point outside bounds then  ALARM
if(  (!is.na( mean(data_set_2$pH[(current_pos-countAB.pH1):current_pos]) )) &&
(!is.na( max( data_set_2$pH[(current_pos-countAB.pH1):current_pos]) ) ) &&
(!is.na( quantile(data_set_2$pH[(current_pos - 241):(current_pos - countAB.pH1)], probs = probS[4])))
){
if ((countAB.pH1 >= wait[1]) &&
(mean(data_set_2$pH[(current_pos-countAB.pH1):current_pos]) >= quantile(data_set_2$pH[(current_pos - 241):(current_pos - countAB.pH1)], probs = probS[4])) &&
(max(data_set_2$pH[(current_pos-countAB.pH1):current_pos]) > bounds.pH[2])) {
POINTS <- TRUE
DIRECTION <- "AB" ##
}
}
}
## FOR BELOW - +
if (data_set_2$pH[current_pos] < trendline.pH[, 1][current_pos]) {
countAB.pH1 <<- 0
countBW.pH1 <<- countBW.pH1 + 1
### if smaller sample mean is greater then previous 6 hours and point outside bounds then  ALARM
if((!is.na(mean(data_set_2$pH[(current_pos-countBW.pH1):current_pos])))&&
(!is.na(max(data_set_2$pH[(current_pos-countBW.pH1):current_pos])))&&
(!is.na(quantile(data_set_2$pH[(current_pos - 241):(current_pos - countBW.pH1)], probs = probS[3])))) {
if ((countBW.pH1 >= wait[2]) &&
(mean(data_set_2$pH[(current_pos-countBW.pH1):current_pos]) <= quantile(data_set_2$pH[(current_pos - 241):(current_pos - countBW.pH1)], probs = probS[3])) &&
(min(data_set_2$pH[(current_pos-countBW.pH1):current_pos]) < bounds.pH[1])) {
POINTS <- TRUE
DIRECTION <- "BW"
}
}
}
#### this section fix up for new alarms structure.
if (POINTS) {
a <- c(data_set_2$MINUTES[current_pos], data_set_2$pH[current_pos], DIRECTION, max(countAB.pH1, countBW.pH1))
alarms.pH1 <<- rbind(alarms.pH1, a)
write.table(cbind(a[1], a[2], a[3], a[4]), "alarms.pH1.dat", row.names = FALSE, append = TRUE, col.names = FALSE)
}
}
################################################################################
#       alerts.pH2
#
################################################################################
alerts.pH2 <- function(data_set_2, current_pos, wait=c(5, 5), probS = c(.05, .95, .05, .95),
period.to.show = 720, bounds.pH = bounds.pH2) {
if(current.code == 0){
trendline.pH <- runquantile(data_set_2$pH, 241, probs=c(0.5, 0.75))
}else {
## stop the baseline update
dir.count <- max(countAB.pH1,countBW.pH1)
data_pause <- c(data_set_2$pH[1:(current_pos-dir.count)],
rep(data_set_2$pH[(current_pos-dir.count)],dir.count))
trendline.pH <- runquantile(data_pause, 241, probs=c(0.5, 0.75))
}
POINTS <- FALSE
DIRECTION <- NULL ##
if (data_set_2$pH[current_pos] >= trendline.pH[, 1][current_pos]) {
countAB.pH2 <<- countAB.pH2 + 1
countBW.pH2 <<- 0
###if smaller sample mean is greater then previous 2 hours and point outside bounds then  ALARM
if((!is.na(mean(data_set_2$pH[(current_pos-countAB.pH2):current_pos])))&&
(!is.na(max(data_set_2$pH[(current_pos-countAB.pH2):current_pos])))&&
(!is.na(quantile(data_set_2$pH[(current_pos - 241):(current_pos - countAB.pH2)], probs = probS[4])))) {
if ((countAB.pH2 >= wait[1]) &&
(mean(data_set_2$pH[(current_pos-countAB.pH2):current_pos]) >= quantile(data_set_2$pH[(current_pos - 241):(current_pos - countAB.pH2)], probs = probS[4])) &&
(max(data_set_2$pH[(current_pos-countAB.pH2):current_pos]) > bounds.pH[2])) {
POINTS <- TRUE
DIRECTION <- "AB" ##
}
}
}
if (data_set_2$pH[current_pos] < trendline.pH[, 1][current_pos]) {
countAB.pH2 <<- 0
countBW.pH2 <<- countBW.pH2 + 1
###if smaller sample mean is greater then previous 2 hours and point outside bounds then  ALARM
if((!is.na(mean(data_set_2$pH[(current_pos-countBW.pH2):current_pos])))&&
(!is.na(max(data_set_2$pH[(current_pos-countBW.pH2):current_pos])))&&
(!is.na(quantile(data_set_2$pH[(current_pos - 241):(current_pos - countBW.pH2)], probs = probS[3])))) {
if ((countBW.pH2 >= wait[2]) &&
(mean(data_set_2$pH[(current_pos-countBW.pH2):current_pos]) <= quantile(data_set_2$pH[(current_pos - 241):(current_pos - countBW.pH2)], probs = probS[3])) &&
(min(data_set_2$pH[(current_pos-countBW.pH2):current_pos]) < bounds.pH[1])) {
POINTS <- TRUE
DIRECTION <- "BW"
}
}
}
if (POINTS) {
a <- c(data_set_2$MINUTES[current_pos], data_set_2$pH[current_pos], DIRECTION, max(countAB.pH2, countBW.pH2))
alarms.pH2 <<- rbind(alarms.pH2, a)
write.table(cbind(a[1], a[2], a[3], a[4]), "alarms.pH2.dat", row.names = FALSE, append = TRUE, col.names = FALSE)
}
}
################################################################################
source("loop.R")
source("loop.R")
bounds.pH2 = c(6.3,8)
bounds.EC2 = c(940,3000)
bounds.TurbA2 = c(50,100)
bounds.TurbS2 = c(30, 600)
bounds.TempC2 = c(19,22)
source("loop.R")
write.table(cbind(minutes, current.sys.code$code, action, current.sys.code$txt, dataset$pH$Date, dataset$pH$Time), "System_Codes1.dat", sep=",", row.names=FALSE, append=TRUE, col.names=FALSE)
minutes
current.sys.code$code
action
current.sys.code$txt
dataset$pH$Date
dataset$pH$Date[dataset$pH$MINUTES==minutes]
cbind(minutes, current.sys.code$code, action, current.sys.code$txt, dataset$pH$Date[dataset$pH$MINUTES==minutes], dataset$pH$Time[dataset$pH$MINUTES==minutes])
dataset.mix
source("data_col.R")
source("loop.R")
dataset$pH$Date[dataset$pH$MINUTES==minutes]
dataset$pH$Time[dataset$pH$MINUTES==minutes])
dataset$pH$Time[dataset$pH$MINUTES==minutes]
dataset.mix[[i]][[1]] <- as.numeric(as.character(dataset.mix[[i]][[1]]))
dataset.mix[[i]][[2]] <- as.numeric(as.character(dataset.mix[[i]][[2]]))
as.character(dataset$pH$Date[dataset$pH$MINUTES==minutes])
write.table(cbind(minutes, current.sys.code$code, action, current.sys.code$txt,
as.character(dataset$pH$Date[dataset$pH$MINUTES==minutes]),
as.character(dataset$pH$Time[dataset$pH$MINUTES==minutes]))
, "System_Codes1.dat", sep=",", row.names=FALSE, append=TRUE, col.names=FALSE)
minutes
is.character(minutes)
is.number(minutes)
is.numeric(minutes)
write.table(as.data.frame(cbind(minutes, current.sys.code$code, action, current.sys.code$txt,
as.character(dataset$pH$Date[dataset$pH$MINUTES==minutes]),
as.character(dataset$pH$Time[dataset$pH$MINUTES==minutes])))
, "System_Codes1.dat", sep=",", row.names=FALSE, append=TRUE, col.names=FALSE)
## why is it storing everythig as characters???
write.table(as.data.frame(c(as.numeric(minutes) , current.sys.code$code, action, current.sys.code$txt,
as.character(dataset$pH$Date[dataset$pH$MINUTES==minutes]),
as.character(dataset$pH$Time[dataset$pH$MINUTES==minutes])))
, "System_Codes1.dat", sep=",", row.names=FALSE, append=TRUE, col.names=FALSE)
write.table(as.data.frame(cbind(as.numeric(minutes) , current.sys.code$code, action, current.sys.code$txt,
as.character(dataset$pH$Date[dataset$pH$MINUTES==minutes]),
as.character(dataset$pH$Time[dataset$pH$MINUTES==minutes])))
, "System_Codes1.dat", sep=",", row.names=FALSE, append=TRUE, col.names=FALSE)
## why is it storing everythig as characters???
write.table(as.data.frame(cbind(as.numeric(minutes) , current.sys.code$code, action, current.sys.code$txt,
as.character(dataset$pH$Date[dataset$pH$MINUTES==minutes]),
as.character(dataset$pH$Time[dataset$pH$MINUTES==minutes])))
, "System_Codes1.dat", sep=",", row.names=FALSE, append=TRUE, col.names=FALSE,quote=F)
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development"
setwd(setDir)
source("data_col.R")
source("start_spot.r")
source("loop.R")
source("data_col.R")
source("loop.R")
# setwd("C:/SentinelTest")
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development"
## run historic data - event
setwd(setDir)
## get historic event from database
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='WQIAS', user='postgres', password='griffith24')
event <<- dbGetQuery(con, "SELECT * FROM events.syd2event_14")
source("data_col.R")
source("loop2.R")
save.image("~/ARC/R WORKSPACES/SydneyEvent14-event-detection.RData")
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development"
## run historic data - event
setwd(setDir)
## get historic event from database
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='WQIAS', user='postgres', password='griffith24')
event <<- dbGetQuery(con, "SELECT * FROM events.syd2event_14")
source("data_col.R")
source("data_col.R")
source("loop2.R")
getwd()
data.dir <- "/data/"
data.dir
filename <- paste("dataset_",file.names[name.i[j]],".dat", sep="")
filename
?write.table
files
paste("/data/",files)
paste("/data/",files, sep="")
ToTgz(tgzName,paste("/data/",files, sep=""))
setDir
paste(setDir,"/data/", sep="")
setwd(paste(setDir,"/data/", sep=""))
ToTgz(tgzName,files)
setdir(setDir)
setwd(paste(setDir,"/data/", sep=""))
ToTgz(tgzName,files)
print("LIVE STREAM UPDATE")
tryCatch({ ftpUpload(tgzName, paste("ftp://192.168.30.11/",tgzName,sep=""))}, condition=function(ex) {
a <- print(ex)
write(paste(Sys.time(),as.character(a),sep=" "), "log.txt",  append=TRUE); })
}
setwd(setDir)
setwd(paste(setDir,"/data/", sep=""))
ToTgz(tgzName,files)
print("LIVE STREAM UPDATE")
tryCatch({ ftpUpload(tgzName, paste("ftp://192.168.30.11/",tgzName,sep=""))}, condition=function(ex) {
a <- print(ex)
write(paste(Sys.time(),as.character(a),sep=" "), "log.txt",  append=TRUE); })
}
setwd(setDir)
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development"
setwd(setDir)
source("data_col.R")
source("/src/data_col.R")
setwd(paste(setDir,src,sep=""))
src <- "src"
setwd(paste(setDir,src,sep=""))
paste(setDir,src,sep="")
setwd(paste(setDir,src,sep="/"))
getwd()
source("data_col.R")
source("start_spot.r")
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development/"
src <- "src"
setwd(paste(setDir,src,sep="/"))
## get historic event from database
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='WQIAS', user='postgres', password='griffith24')
event <<- dbGetQuery(con, "SELECT * FROM events.syd2event_14")
source("loop2.R")
setwd(paste(setDir,"test",sep="/"))
## get historic event from database
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='WQIAS', user='postgres', password='griffith24')
event <<- dbGetQuery(con, "SELECT * FROM events.syd2event_14")
source("loop2.R")
source("loop2.R")
source("loop2.R")
setwd(paste(setDir,"test",sep="/"))
source("loop2.R")
source("sendAlarm.R")
getwd()
src
setDir
paste("setDir",src,"sendAlarm.R",sep="/")
source(paste("setDir",src,"sendAlarm.R",sep="/"))
paste(setDir,src,"sendAlarm.R",sep="/")
paste(setDir,src,"/sendAlarm.R",sep="")
source(paste(setDir,src,"/sendAlarm.R",sep=""))
getdr()
getwd()
ftpUpload(a_tgzName, paste("ftp://192.168.30.11/",a_tgzName,sep=""))
ftpUpload(tgzName, paste("ftp://192.168.30.11/",tgzName,sep=""))
a_tgzName <- "alData.tgz"
a_files <- list.files(pattern = "alarms.")
a_files2 <- list.files(pattern = "dataset_alarm_")
a_files3 <- list.files(pattern = "System.Codes1.dat")
f <- c(unlist(a_files),unlist(a_files2),unlist(a_files3))
ToTgz(a_tgzName,f)
a_tgzName
paste("ftp://192.168.30.11/",a_tgzName,sep="")
ftpUpload(a_tgzName, paste("ftp://192.168.30.11/",a_tgzName,sep=""))
source("loop2.R")
source(paste(setDir,"test","/loop2.R",sep=""))
getwd()
source(paste(setDir,"test","/loop2.R",sep=""))
tryCatch({ ftpUpload(tgzName, paste("ftp://192.168.30.11/",tgzName,sep=""))}, condition=function(ex) {
a <- print(ex)
write(paste(Sys.time(),as.character(a),sep=" "), "log.txt",  append=TRUE);
#ftp failed so set to start.minute to do again next time
#  write.table(start.minute, file = "minute.txt", row.names = FALSE,col.names=FALSE)
# after send delete files?
})
tryCatch({ ftpUpload("alData.tgz", paste("ftp://192.168.30.11/","alData.tgz",sep=""))}, condition=function(ex) {
a <- print(ex)
write(paste(Sys.time(),as.character(a),sep=" "), "log.txt",  append=TRUE);
#ftp failed so set to start.minute to do again next time
#  write.table(start.minute, file = "minute.txt", row.names = FALSE,col.names=FALSE)
# after send delete files?
})
a_tgzName <- "aldata.tgz"
a_files <- list.files(pattern = "alarms.")
a_files2 <- list.files(pattern = "dataset_alarm_")
a_files3 <- list.files(pattern = "System.Codes1.dat")
f <- c(unlist(a_files),unlist(a_files2),unlist(a_files3))
ToTgz(a_tgzName,f)
tryCatch({ ftpUpload(a_tgzName, paste("ftp://192.168.30.11/",a_tgzName,sep=""))}, condition=function(ex) {
a <- print(ex)
write(paste(Sys.time(),as.character(a),sep=" "), "log.txt",  append=TRUE);
#ftp failed so set to start.minute to do again next time
#  write.table(start.minute, file = "minute.txt", row.names = FALSE,col.names=FALSE)
# after send delete files?
})
a_tgzName
a_tgzName
a_tgzName <- "aldata.tgz"
a_files <- list.files(pattern = "alarms.")
a_files2 <- list.files(pattern = "dataset_alarm_")
a_files3 <- list.files(pattern = "System.Codes1.dat")
f <- c(unlist(a_files),unlist(a_files2),unlist(a_files3))
ToTgz(a_tgzName,f)
ftpUpload(a_tgzName, paste("ftp://192.168.30.11/",a_tgzName,sep=""))
paste("ftp://192.168.30.11/",tgzName,sep="")
file <- paste("ftp://192.168.30.11/",tgzName,sep="")
file
ftpUpload(file)
getwd()
ftpUpload(tgzName,file)
ftpUpload(a_tgzName,file)
a_tgzName <- "alData.tgz"
a_files <- list.files(pattern = "alarms.")
a_files2 <- list.files(pattern = "dataset_alarm_")
a_files3 <- list.files(pattern = "System.Codes1.dat")
f <- c(unlist(a_files),unlist(a_files2),unlist(a_files3))
ToTgz(a_tgzName,f)
tryCatch({ ftpUpload(a_tgzName, paste("ftp://192.168.30.11/",a_tgzName,sep=""))}, condition=function(ex) {
a <- print(ex)
write(paste(Sys.time(),as.character(a),sep=" "), "log.txt",  append=TRUE);
#ftp failed so set to start.minute to do again next time
#  write.table(start.minute, file = "minute.txt", row.names = FALSE,col.names=FALSE)
# after send delete files?
})
source(paste(setDir,"test","/loop2.R",sep=""))
tryCatch({ ftpUpload(a_tgzName, paste("ftp://192.168.30.11/4/",a_tgzName,sep=""))}, condition=function(ex) {
a <- print(ex)
write(paste(Sys.time(),as.character(a),sep=" "), "log.txt",  append=TRUE);
#ftp failed so set to start.minute to do again next time
#  write.table(start.minute, file = "minute.txt", row.names = FALSE,col.names=FALSE)
# after send delete files?
})
source(paste(setDir,"test","/loop2.R",sep=""))
timerange <- par()$usr[1:2]
timerange
diff(timerange)
DayBreaks
DayBreakLabels
?strptime
dataset$pH
dataset$pH$Date
strptime(dataset$pH$Date, format="%d/%m/%Y")
format(strptime(dataset$pH$Date, format="%d/%m/%Y"),"%Y/%m/%d")
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development/"
src <- "src"
setwd(paste(setDir,"test",sep="/"))
## get historic event from database
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='WQIAS', user='postgres', password='griffith24')
event <<- dbGetQuery(con, "SELECT * FROM events.syd2event_14")
source(paste(setDir,"test","/data_col.R",sep=""))
source(paste(setDir,"src","/data_col.R",sep=""))
setwd(paste(setDir,"src",sep="/"))
## get historic event from database
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='WQIAS', user='postgres', password='griffith24')
event <<- dbGetQuery(con, "SELECT * FROM events.syd2event_14")
source(paste(setDir,"src","/data_col.R",sep=""))
source(paste(setDir,"test","/loop2.R",sep=""))
source(paste(setDir,"test","/loop2.R",sep=""))
ChangeDatefmt <- function(dataset, date.fmt, new.fmt){
return( format(strptime(dataset$Date, format=date.fmt),new.fmt) )
}
dataset.mix[[j]]$Date <- ChangeDatefmt(dataset.mix[[j]], "%d/%m/%Y","%Y/%m/%d")
source(paste(setDir,"test","/loop2.R",sep=""))
dataset.mix[[j]]
filename
dataset[[j]]
?rm()
rm(list = ls())
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development/"
src <- "src"
setwd(paste(setDir,"src",sep="/"))
## get historic event from database
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='WQIAS', user='postgres', password='griffith24')
event <<- dbGetQuery(con, "SELECT * FROM events.syd2event_14")
source(paste(setDir,"src","/data_col.R",sep=""))
source(paste(setDir,"test","/loop2.R",sep=""))
help(strftime)
?rm
rm(list = ls())
10/12
12/10
12*.2
12*.2
9*19
278/24
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development/"
src <- "src"
setwd(paste(setDir,"src",sep="/"))
## get historic event from database
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='localhost', port='5432', dbname='WQIAS', user='postgres', password='griffith24')
event <<- dbGetQuery(con, "SELECT * FROM events.syd2event_6")
source(paste(setDir,"src","/data_col.R",sep=""))
source(paste(setDir,"test","/loop2.R",sep=""))
2181/2
1090*23
save.image("~/ARC/ARC-Project/R SAVED WORKSPACES/Sydney2Event6-event-detection.RData")
rm(list = ls())
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development/"
setwd(paste(setDir,src,sep="/"))
src <- "src"
setwd(paste(setDir,src,sep="/"))
setwd(paste(setDir,"data/",sep=""))
getwd()
source(paste(setDir,"src","/data_col.R",sep=""))
source(paste(setDir,"src","/data_col.R",sep=""))
setwd(paste(setDir,"data/",sep=""))
source(paste(setDir,"src","/loop.R",sep=""))
setwd(paste(setDir,"src",sep="/"))
getwd()
source(paste(setDir,"src","/data_col.R",sep=""))
source("functionsGeneric.r")
source("douglasFunction.R")
setwd(paste(setDir,"data/",sep=""))
source(paste(setDir,"src","/start_spot.R",sep=""))
num.points <- 241
for (j in 1:n) {
file <- paste("dataset_" , file.names[[name.i[j]]], ".dat", sep="")
df.names <- c("Date", "Time", sensor.names.all[name.i[j]], "MINUTES")
dataset.previous <- read.table(file, col.names=df.names,sep="",fill=TRUE)
set.df <- tail(dataset.previous, n=num.points)
#remove NA rows
row.has.na <- apply(set.df, 1, function(x){any(is.na(x))})
sum(row.has.na)
set.df <- set.df[!row.has.na,]
dataset[[j]] <- set.df
colnames(dataset[[j]]) <- df.names
}
#do some cleanup
rm(set.df,df.names,file,dataset.previous,row.has.na)
source(paste(setDir,"src","/loop.R",sep=""))
plot(1)
plot(1)
plot(1)
source(paste(setDir,"src","/loop.R",sep=""))
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development/"
src <- "src"
setwd(paste(setDir,"src",sep="/"))
source(paste(setDir,"src","/data_col.R",sep=""))
setwd(paste(setDir,"data/",sep=""))
source(paste(setDir,"src","/start_spot.R",sep=""))
source(paste(setDir,"src","/loop.R",sep=""))
ToTgz
setDir <- "C:/Users/s2783343/Documents/ARC/ARC-Project/ARC-Project Development/"
src <- "src"
setwd(paste(setDir,"src",sep="/"))
source(paste(setDir,"src","/data_col.R",sep=""))
setwd(paste(setDir,"data/",sep=""))
source(paste(setDir,"src","/start_spot.R",sep=""))
source(paste(setDir,"src","/loop.R",sep=""))
source(paste(setDir,"src","/loop.R",sep=""))
lenNewData
467*60
(467*60)*24
672480/131072
5*30
a <- "Data,Cond,16/07/2015,165.2\r\n"
unlist(strsplit(a[3], " "))[[1]] , unlist( strsplit(a[3], " ") )[[2]]
unlist(strsplit(a[3], " "))[[1]]
a <- unlist(strsplit("Data,Cond,16/07/2015,165.2\r\n", "\\,"))
a
unlist( strsplit(a[3], " ") )[[2]]
if.exists(unlist( strsplit(a[3], " ") )[[2]])
unlist(strsplit(a[3], " "))[[1]] , exists(unlist( strsplit(a[3], " ") )[[2]])
exists(unlist( strsplit(a[3], " ") )[[2]])
length(a[3])
a[3]
length(a[3][1])
?nchar
nchar(a[3])
a2 <- unlist(strsplit("Data,Cond,16/07/2015 23:59:59,165.2\r\n", "\\,"))
nchar(a2[3])
Sys.Time()
System.Time()
Sys.time()
a3 <- Sys.time()
a3 <- unlist(strsplit(Sys.time()))
a3 <- unlist(strsplit(Sys.time()," "))
a3 <- unlist(strsplit(Sys.time(),"\\,"))
as.character(Sys.time())
a3 <- unlist(strsplit(as.character(Sys.time()),"\\,"))
a3
a[3] <- unlist(strsplit(as.character(Sys.time()),"\\,"))
a[3]
a[3][1]
unlist(strsplit(as.character(a[3]," ")[[1]])
unlist(strsplit(as.character(a[3]," ")[[1]]))
unlist(strsplit(a[3]," "))[[1]])
unlist(strsplit(a[3]," "))[[1]]
Sys.time()
a[3] <- as.character(Sys.time())
unlist(strsplit(a[3]," "))[[1]]
a <- unlist(strsplit("Data,Cond,16/07/2015,165.2\r\n", "\\,"))
a
nchar(a[3]) <= 10
if( nchar(a[3]) <= 10 ){
a[3] <- as.character(format(Sys.time(), "%a %b %d %X %Y"))
}
returned_data <- cbind( unlist(strsplit(a[3]," "))[[1]], unlist(strsplit(a[3]," "))[[2]])
colnames(returned_data ) <- c("Date", "Time")
a <- unlist(strsplit("Data,Cond,16/07/2015,165.2\r\n", "\\,"))
returned_data <- cbind( unlist(strsplit(a[3]," "))[[1]], unlist(strsplit(a[3]," "))[[2]])
?format
format(Sys.time(), "%d/%m/%Y %H:%M:%S")
